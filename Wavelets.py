import numpy as np
import matplotlib.pyplot as plt


class Wavelet:
    def __init__(self, wavelet_name):
        self._wavelet_name = wavelet_name.lower()
        self._signal_length = 2400   # длина записи в мс
        self._sample_rate = 2        # шаг выборки в мс
        self._central_time = 1200    # центральное время импульса в мс
        self._dom_freq = 10          # центральная частота в Гц
        self._num_iter = 6           # кол-во циклов

        # Инициализация зависимых переменных
        self._update_dependent_variables()

    def _update_dependent_variables(self):
        """Обновление зависимых переменных при изменении основных свойств."""
        # Преобразование значений в секунды
        self._signal_length_sec = self._signal_length / 1000.0
        self._sample_rate_sec = self._sample_rate / 1000.0
        self._central_time_sec = self._central_time / 1000.0

        self._time = np.arange(0, self._signal_length_sec, self._sample_rate_sec)       # Массив времени
        self._time_shifted = self._time - self._central_time_sec                        # Массив времени, центрированный вокруг t_0
        self._sigma = self._num_iter / (2 * np.pi * self._dom_freq)                     # Стандартное отклонение

    @property
    def signal_length(self):
        """Длина записи в мс."""
        return self._signal_length

    @signal_length.setter
    def signal_length(self, value):
        self._signal_length = value
        self._update_dependent_variables()

    @property
    def sample_rate(self):
        """Шаг выборки в мс."""
        return self._sample_rate

    @sample_rate.setter
    def sample_rate(self, value):
        self._sample_rate = value
        self._update_dependent_variables()

    @property
    def central_time(self):
        """Центральное время импульса в мс."""
        return self._central_time

    @central_time.setter
    def central_time(self, value):
        self._central_time = value
        self._update_dependent_variables()
    
    @property
    def dom_freq(self):
        """Центральная частота в Гц."""
        return self._dom_freq

    @dom_freq.setter
    def dom_freq(self, value):
        self._dom_freq = value
        self._update_dependent_variables()
    
    @property
    def num_iter(self):
        """Количество циклов."""
        return self._num_iter

    @num_iter.setter
    def num_iter(self, value):
        self._num_iter = value
        self._update_dependent_variables()
    
    @property
    def signal_length_sec(self):
        """Длина записи в секундах."""
        return self._signal_length_sec

    @property
    def sample_rate_sec(self):
        """Шаг выборки в секундах."""
        return self._sample_rate_sec

    @property
    def central_time_sec(self):
        """Центральное время импульса в секундах."""
        return self._central_time_sec

    @property
    def time(self):
        """Массив времени."""
        return self._time

    @property
    def time_shifted(self):
        """Массив времени, центрированный вокруг t_0."""
        return self._time_shifted

    @property
    def sigma(self):
        """Стандартное отклонение."""
        return self._sigma

    def generate_wavelet(self):
        """Генерирует вейвлет в соответствии с заданным названием."""
        
        if self._wavelet_name == 'ricker':
            return self.ricker()
            
        elif self._wavelet_name == 'morlet1':
            return self.morlet()[0]
            
        elif self._wavelet_name == 'morlet2':
            return self.morlet()[1]
            
        elif self._wavelet_name == 'morlet3':
            return self.morlet()[2]
            
        elif self._wavelet_name.startswith('gaus'):
            wavelet_method = getattr(self, self._wavelet_name, None)
            if callable(wavelet_method):
                return wavelet_method()
            else:
                raise ValueError(f"Метод {self._wavelet_name} не найден или не является вызываемым")

        elif self._wavelet_name.startswith(('db', 'coif', 'sym')):
            # Извлекаем базовое название и число после него
            base_wavelet_name = ''
            number = ''
            for base in ('db', 'coif', 'sym'):
                if self._wavelet_name.startswith(base):
                    base_wavelet_name = base
                    number = self._wavelet_name[len(base):]
                    break
                    
            if base_wavelet_name and number.isdigit():
                return self.daubechies(base_wavelet_name, int(number))
        
        else:
            raise ValueError(f"Неизвестное название вейвлета: {self._wavelet_name}")

    def get_wavelet_list(self):
        """
        Генерирует список вейвлетов.
    
        Возвращает:
            wavelet_list (numpy.ndarray): Список с названиями доступных вейвлетов.
        """
        wavelet_list = ['ricker'] + \
            [f"morlet{n}" for n in range(1, 4)] + \
            [f"db{n}" for n in range(4, 21, 2)] + \
            [f"sym{n}" for n in range(4, 21, 2)] + \
            [f"coif{n}" for n in range(4, 17, 2)]
    
        return np.array(wavelet_list)
    
    def ricker(self):
        """
        Генерирует вейвлет Рикера (вейвлет "мексиканская шляпа").

        Возвращает:
            ricker (numpy.ndarray): Вейвлет Рикера.
        """
        
        pi_fm_t = np.pi * self.dom_freq * (self.time - self.central_time_sec)
        ricker = (1 - 2 * (pi_fm_t) ** 2) * np.exp(-(pi_fm_t) ** 2)
        return ricker

    def morlet(self):
        """
        Генерирует вейвлет Морле.

        Возвращает:
            np.real(morlet_wavelet) (numpy.ndarray): действительная часть вейвлета Морле;
            np.imag(morlet_wavelet) (numpy.ndarray): мнимая часть вейвлета Морле;
            np.abs(morlet_wavelet) (numpy.ndarray): модуль (огибающая) вейвлета Морле.
        """
        
        # Формула для Морле: 
        # Psi(t) = exp(-t^2 / (2 * sigma^2)) * exp(2 * pi * i * fm * t)
        
        # Вычисляем комплексный вейвлет
        morlet_wavelet = (
            np.exp(-self.time_shifted **2 / (2 * self.sigma**2))  # огибающая (гауссиан)
            * np.exp(2j * np.pi * self.dom_freq * self.time_shifted)   # комплексная гармоническая составляющая
        )
        
        # Возвращаем действительную, мнимую часть, а также модуль вейвлета
        return np.real(morlet_wavelet), np.imag(morlet_wavelet), np.abs(morlet_wavelet)

    def gaus1(self):
        """
        Генерирует гауссов вейвлет.
        
        Возвращает:
            gauss_wavelet (numpy.ndarray): вейвлет Гаусса (gaus1).
        """
        
        # Генерируем гауссов вейвлет (первая производная от Гауссианы)
        gauss_wavelet = - (self.time_shifted / self.sigma**2) * np.exp(-self.time_shifted**2 / (2 * self.sigma**2))
        
        return gauss_wavelet

    def gaus2(self):
        """
        Генерирует гауссов вейвлет.
        
        Возвращает:
            gaus2_wavelet (numpy.ndarray): вейвлет Гаусса (gaus2).
        """
        
        # ψ(t) = - (t^2 - σ^2) / σ^4 * exp(-t^2 / (2 * σ^2))
        gaus2_wavelet = - ( (self.time_shifted**2 - self.sigma**2) / self.sigma**4 ) * np.exp(-self.time_shifted**2 / (2 * self.sigma**2))

        # Возвращаем значения вейвлета
        return gaus2_wavelet

    def gaus3(self):
        """
        Генерирует гауссов вейвлет.
        
        Возвращает:
            gaus3_wavelet (numpy.ndarray): вейвлет Гаусса (gaus2).
        """

        # ψ(t) = (t^3 - 3σ^2 t) / σ^6 * exp(-t^2 / (2 * σ^2))
        gaus3_wavelet = ( (self.time_shifted**3 - 3 * self.sigma**2 * self.time_shifted) / self.sigma**6 ) * np.exp(-self.time_shifted**2 / (2 * self.sigma**2))

        # Возвращаем значения вейвлета
        return gaus3_wavelet

    def gaus4(self):
        """
        Генерирует гауссов вейвлет.
        
        Возвращает:
            gaus4_wavelet (numpy.ndarray): вейвлет Гаусса (gaus2).
        """
        
        # ψ(t) = (t^4 - 6σ^2 t^2 + 3σ^4) / σ^8 * exp(-t^2 / (2 * σ^2))
        gaus4_wavelet = ( (self.time_shifted**4 - 6 * self.sigma**2 * self.time_shifted**2 + 3 * self.sigma**4) / self.sigma**8 ) * np.exp(-self.time_shifted**2 / (2 * self.sigma**2))

        # Возвращаем значения вейвлета
        return gaus4_wavelet

    def gaus5(self):
        """
        Генерирует гауссов вейвлет.
        
        Возвращает:
            gaus5_wavelet (numpy.ndarray): вейвлет Гаусса (gaus2).
        """

        # ψ(t) = (-t^5 + 10σ^2 t^3 - 15σ^4 t) / σ^10 * exp(-t^2 / (2 * σ^2))
        gaus5_wavelet = ( (-self.time_shifted**5 + 10 * self.sigma**2 * self.time_shifted**3 - 15 * self.sigma**4 * self.time_shifted) / self.sigma**10 ) * np.exp(-self.time_shifted **2 / (2 * self.sigma**2))

        return gaus5_wavelet

    def gaus6(self):
        """
        Генерирует гауссов вейвлет.
        
        Возвращает:
            gaus6_wavelet (numpy.ndarray): вейвлет Гаусса (gaus2).
        """

        # ψ(t) = -(t^6 - 15σ^2 t^4 + 45σ^4 t^2 - 15σ^6) / σ^12 * exp(-t^2 / (2 * σ^2))
        gaus6_wavelet = -( (self.time_shifted**6 - 15 * self.sigma**2 * self.time_shifted**4 + 45 * self.sigma**4 * self.time_shifted**2 - 15 * self.sigma**6) / self.sigma**12 ) * np.exp(-self.time_shifted**2 / (2 * self.sigma**2))
        
        return gaus6_wavelet

    def gaus7(self):
        """
        Генерирует гауссов вейвлет.
        
        Возвращает:
            gaus7_wavelet (numpy.ndarray): вейвлет Гаусса (gaus2).
        """

        # ψ(t) = (t^7 - 21σ^2 t^5 + 105σ^4 t^3 - 105σ^6 t) / σ^14 * exp(-t^2 / (2 * σ^2))
        gaus7_wavelet = ( (self.time_shifted**7 - 21 * self.sigma**2 * self.time_shifted**5 + 105 * self.sigma**4 * self.time_shifted**3 - 105 * self.sigma**6 * self.time_shifted) / self.sigma**14 ) * np.exp(-self.time_shifted**2 / (2 * self.sigma**2))

        return gaus7_wavelet

    def gaus8(self):
        """
        Генерирует гауссов вейвлет.
        
        Возвращает:
            gaus8_wavelet (numpy.ndarray): вейвлет Гаусса (gaus2).
        """

        # ψ(t) = (t^8 - 28σ^2 t^6 + 210σ^4 t^4 - 420σ^6 t^2 + 105σ^8) / σ^16 * exp(-t^2 / (2 * σ^2))
        gaus8_wavelet = ( (self.time_shifted**8 - 28 * self.sigma**2 * self.time_shifted**6 + 210 * self.sigma**4 * self.time_shifted**4 - 420 * self.sigma**6 * self.time_shifted**2 + 105 * self.sigma**8) / self.sigma**16 ) * np.exp(-self.time_shifted**2 / (2 * self.sigma**2))
        
        return gaus8_wavelet
    
    def daubechies(self, name, N):
        """
        Генерирует вейвлет Daubechies/Symlet/Coiflet указанного порядка с использованием каскадного алгоритма.

        Параметры:
            name (str): Принимает значения db/sym/coif (Daubechies, Symlets, Coiflet)
            N (int): Порядок вейвлета (4, 6, 8 ... 20 для db/sym, 4, 6, 8 ... 16 для coif).

        Возвращает:
            phi (numpy.ndarray): Функция масштабирования (вейвлет).
        """

        # if order not in h_coefficients:
        #     raise ValueError(f"Порядок вейвлета должен быть между 4 и 10, получено: {order}")

        h = self.symlet_coefficients(name, N)

        # Функция для увеличения дискретизации сигнала (вставка нулей между отсчетами)
        def upsample(signal):
            upsampled = np.zeros((len(signal) * 2) - 1)
            upsampled[::2] = signal
            return upsampled

        phi = np.array([1.0])  # Инициализация phi_0(t)

        # Выполнение итераций каскадного алгоритма для вычисления phi(t)
        for _ in range(self.num_iter):
            # Увеличение дискретизации phi
            phi_up = upsample(phi)
            # Свертка с коэффициентами масштабирования h
            phi = np.sqrt(2) * np.convolve(phi_up, h, mode='full')

        # Вычисляем массив времени для phi, центрированный вокруг self.central_time_sec
        mid_index = len(phi) // 2
        t_phi = (np.arange(len(phi)) - mid_index) * self.sample_rate_sec + self.central_time_sec

        # Интерполируем phi на массив времени self.time
        phi_resampled = np.interp(self.time, t_phi, phi)

        return phi_resampled

    def symlet_coefficients(self, name, N):
        """
        Выдает коэффициенты уравнения вейвлетов Добеши (dbN, cymN, coifN)

        Параметры:
            name (str): Принимает значения db, sym, coif (Daubechies, Symlets, Coiflet)
            N (int): Порядок вейвлета.

        Возвращает:
            coef (numpy.ndarray): Коэффициенты уравнения.
        """
        
        # Словари коэффициентов
        db_coefficients = {
            4: np.array([
                2.303778133088965008632911830440708500016152482483092977910968e-01,
                7.148465705529156470899219552739926037076084010993081758450110e-01,
                6.308807679298589078817163383006152202032229226771951174057473e-01,
                -2.798376941685985421141374718007538541198732022449175284003358e-02,
                -1.870348117190930840795706727890814195845441743745800912057770e-01,
                3.084138183556076362721936253495905017031482172003403341821219e-02,
                3.288301166688519973540751354924438866454194113754971259727278e-02,
                -1.059740178506903210488320852402722918109996490637641983484974e-02

            ]),
            
            6: np.array([
                1.115407433501094636213239172409234390425395919844216759082360e-01,
                4.946238903984530856772041768778555886377863828962743623531834e-01,
                7.511339080210953506789344984397316855802547833382612009730420e-01,
                3.152503517091976290859896548109263966495199235172945244404163e-01,
                -2.262646939654398200763145006609034656705401539728969940143487e-01,
                -1.297668675672619355622896058765854608452337492235814701599310e-01,
                9.750160558732304910234355253812534233983074749525514279893193e-02,
                2.752286553030572862554083950419321365738758783043454321494202e-02,
                -3.158203931748602956507908069984866905747953237314842337511464e-02,
                5.538422011614961392519183980465012206110262773864964295476524e-04,
                4.777257510945510639635975246820707050230501216581434297593254e-03,
                -1.077301085308479564852621609587200035235233609334419689818580e-03

            ]),

            8: np.array([
                5.441584224310400995500940520299935503599554294733050397729280e-02,
                3.128715909142999706591623755057177219497319740370229185698712e-01,
                6.756307362972898068078007670471831499869115906336364227766759e-01,
                5.853546836542067127712655200450981944303266678053369055707175e-01,
                -1.582910525634930566738054787646630415774471154502826559735335e-02,
                -2.840155429615469265162031323741647324684350124871451793599204e-01,
                4.724845739132827703605900098258949861948011288770074644084096e-04,
                1.287474266204784588570292875097083843022601575556488795577000e-01,
                -1.736930100180754616961614886809598311413086529488394316977315e-02,
                -4.408825393079475150676372323896350189751839190110996472750391e-02,
                1.398102791739828164872293057263345144239559532934347169146368e-02,
                8.746094047405776716382743246475640180402147081140676742686747e-03,
                -4.870352993451574310422181557109824016634978512157003764736208e-03,
                -3.917403733769470462980803573237762675229350073890493724492694e-04,
                6.754494064505693663695475738792991218489630013558432103617077e-04,
                -1.174767841247695337306282316988909444086693950311503927620013e-04

            ]),

            10: np.array([
                2.667005790055555358661744877130858277192498290851289932779975e-02,
                1.881768000776914890208929736790939942702546758640393484348595e-01,
                5.272011889317255864817448279595081924981402680840223445318549e-01,
                6.884590394536035657418717825492358539771364042407339537279681e-01,
                2.811723436605774607487269984455892876243888859026150413831543e-01,
                -2.498464243273153794161018979207791000564669737132073715013121e-01,
                -1.959462743773770435042992543190981318766776476382778474396781e-01,
                1.273693403357932600826772332014009770786177480422245995563097e-01,
                9.305736460357235116035228983545273226942917998946925868063974e-02,
                -7.139414716639708714533609307605064767292611983702150917523756e-02,
                -2.945753682187581285828323760141839199388200516064948779769654e-02,
                3.321267405934100173976365318215912897978337413267096043323351e-02,
                3.606553566956169655423291417133403299517350518618994762730612e-03,
                -1.073317548333057504431811410651364448111548781143923213370333e-02,
                1.395351747052901165789318447957707567660542855688552426721117e-03,
                1.992405295185056117158742242640643211762555365514105280067936e-03,
                -6.858566949597116265613709819265714196625043336786920516211903e-04,
                -1.164668551292854509514809710258991891527461854347597362819235e-04,
                9.358867032006959133405013034222854399688456215297276443521873e-05,
                -1.326420289452124481243667531226683305749240960605829756400674e-05
                
            ]),  

            12: np.array([
                1.311225795722951750674609088893328065665510641931325007748280e-02,
                1.095662728211851546057045050248905426075680503066774046383657e-01,
                3.773551352142126570928212604879206149010941706057526334705839e-01,
                6.571987225793070893027611286641169834250203289988412141394281e-01,
                5.158864784278156087560326480543032700677693087036090056127647e-01,
                -4.476388565377462666762747311540166529284543631505924139071704e-02,
                -3.161784537527855368648029353478031098508839032547364389574203e-01,
                -2.377925725606972768399754609133225784553366558331741152482612e-02,
                1.824786059275796798540436116189241710294771448096302698329011e-01,
                5.359569674352150328276276729768332288862665184192705821636342e-03,
                -9.643212009650708202650320534322484127430880143045220514346402e-02,
                1.084913025582218438089010237748152188661630567603334659322512e-02,
                4.154627749508444073927094681906574864513532221388374861287078e-02,
                -1.221864906974828071998798266471567712982466093116558175344811e-02,
                -1.284082519830068329466034471894728496206109832314097633275225e-02,
                6.711499008795509177767027068215672450648112185856456740379455e-03,
                2.248607240995237599950865211267234018343199786146177099262010e-03,
                -2.179503618627760471598903379584171187840075291860571264980942e-03,
                6.545128212509595566500430399327110729111770568897356630714552e-06,
                3.886530628209314435897288837795981791917488573420177523436096e-04,
                -8.850410920820432420821645961553726598738322151471932808015443e-05,
                -2.424154575703078402978915320531719580423778362664282239377532e-05,
                1.277695221937976658714046362616620887375960941439428756055353e-05,
                -1.529071758068510902712239164522901223197615439660340672602696e-06
                
            ]), 
            
            14: np.array([
                6.461153460087947818166397448622814272327159419201199218101404e-03,
                6.236475884939889832798566758434877428305333693407667164602518e-02,
                2.548502677926213536659077886778286686187042416367137443780084e-01,
                5.543056179408938359926831449851154844078269830951634609683997e-01,
                6.311878491048567795576617135358172348623952456570017289788809e-01,
                2.186706877589065214917475918217517051765774321270432059030273e-01,
                -2.716885522787480414142192476181171094604882465683330814311896e-01,
                -2.180335299932760447555558812702311911975240669470604752747127e-01,
                1.383952138648065910739939690021573713989900463229686119059119e-01,
                1.399890165844607012492943162271163440328221555614326181333683e-01,
                -8.674841156816968904560822066727795382979149539517503657492964e-02,
                -7.154895550404613073584145115173807990958069673129538099990913e-02,
                5.523712625921604411618834060533403397913833632511672157671107e-02,
                2.698140830791291697399031403215193343375766595807274233284349e-02,
                -3.018535154039063518714822623489137573781575406658652624883756e-02,
                -5.615049530356959133218371367691498637457297203925810387698680e-03,
                1.278949326633340896157330705784079299374903861572058313481534e-02,
                -7.462189892683849371817160739181780971958187988813302900435487e-04,
                -3.849638868022187445786349316095551774096818508285700493058915e-03,
                1.061691085606761843032566749388411173033941582147830863893939e-03,
                7.080211542355278586442977697617128983471863464181595371670094e-04,
                -3.868319473129544821076663398057314427328902107842165379901468e-04,
                -4.177724577037259735267979539839258928389726590132730131054323e-05,
                6.875504252697509603873437021628031601890370687651875279882727e-05,
                -1.033720918457077394661407342594814586269272509490744850691443e-05,
                -4.389704901781394115254042561367169829323085360800825718151049e-06,
                1.724994675367812769885712692741798523587894709867356576910717e-06,
                -1.787139968311359076334192938470839343882990309976959446994022e-07
                
            ]), 
            
            16: np.array([
                3.189220925347738029769547564645958687067086750131428767875878e-03,
                3.490771432367334641030147224023020009218241430503984146140054e-02,
                1.650642834888531178991252730561134811584835002342723240213592e-01,
                4.303127228460038137403925424357684620633970478036986773924646e-01,
                6.373563320837888986319852412996030536498595940814198125967751e-01,
                4.402902568863569000390869163571679288527803035135272578789884e-01,
                -8.975108940248964285718718077442597430659247445582660149624718e-02,
                -3.270633105279177046462905675689119641757228918228812428141723e-01,
                -2.791820813302827668264519595026873204339971219174736041535479e-02,
                2.111906939471042887209680163268837900928491426167679439251042e-01,
                2.734026375271604136485245757201617965429027819507130220231500e-02,
                -1.323883055638103904500474147756493375092287817706027978798549e-01,
                -6.239722752474871765674503394120025865444656311678760990761458e-03,
                7.592423604427631582148498743941422461530405946100943351940313e-02,
                -7.588974368857737638494890864636995796586975144990925400097160e-03,
                -3.688839769173014233352666320894554314718748429706730831064068e-02,
                1.029765964095596941165000580076616900528856265803662208854147e-02,
                1.399376885982873102950451873670329726409840291727868988490100e-02,
                -6.990014563413916670284249536517288338057856199646469078115759e-03,
                -3.644279621498389932169000540933629387055333973353108668841215e-03,
                3.128023381206268831661202559854678767821471906193608117450360e-03,
                4.078969808497128362417470323406095782431952972310546715071397e-04,
                -9.410217493595675889266453953635875407754747216734480509250273e-04,
                1.142415200387223926440228099555662945839684344936472652877091e-04,
                1.747872452253381803801758637660746874986024728615399897971953e-04,
                -6.103596621410935835162369150522212811957259981965919143961722e-05,
                -1.394566898820889345199078311998401982325273569198675335408707e-05,
                1.133660866127625858758848762886536997519471068203753661757843e-05,
                -1.043571342311606501525454737262615404887478930635676471546032e-06,
                -7.363656785451205512099695719725563646585445545841663327433569e-07,
                2.308784086857545866405412732942006121306306735866655525372544e-07,
                -2.109339630100743097000572623603489906836297584591605307745349e-08
                
            ]),  

            18: np.array([
                1.576310218440760431540744929939777747670753710991660363684429e-03,
                1.928853172414637705921391715829052419954667025288497572236714e-02,
                1.035884658224235962241910491937253596470696555220241672976224e-01,
                3.146789413370316990571998255652579931786706190489374509491307e-01,
                5.718268077666072234818589370900623419393673743130930561295324e-01,
                5.718016548886513352891119994065965025668047882818525060759395e-01,
                1.472231119699281415750977271081072312557864107355701387801677e-01,
                -2.936540407365587442479030994981150723935710729035053239661752e-01,
                -2.164809340051429711237678625668271471437937235669492408388692e-01,
                1.495339755653777893509301738913667208804816691893765610261943e-01,
                1.670813127632574045149318139950134745324205646353988083152250e-01,
                -9.233188415084628060429372558659459731431848000144569612074508e-02,
                -1.067522466598284855932200581614984861385266404624112083917702e-01,
                6.488721621190544281947577955141911463129382116634147846137149e-02,
                5.705124773853688412090768846499622260596226120431038524600676e-02,
                -4.452614190298232471556143559744653492971477891439833592755034e-02,
                -2.373321039586000103275209582665216110197519330713490233071565e-02,
                2.667070592647059029987908631672020343207895999936072813363471e-02,
                6.262167954305707485236093144497882501990325204745013190268052e-03,
                -1.305148094661200177277636447600807169755191054507571666606133e-02,
                1.186300338581174657301741592161819084544899417452317405185615e-04,
                4.943343605466738130665529516802974834299638313366477765295203e-03,
                -1.118732666992497072800658855238650182318060482584970145512687e-03,
                -1.340596298336106629517567228251583609823044524685986640323942e-03,
                6.284656829651457125619449885420838217551022796301582874349652e-04,
                2.135815619103406884039052814341926025873200325996466522543440e-04,
                -1.986485523117479485798245416362489554927797880264017876139605e-04,
                -1.535917123534724675069770335876717193700472427021513236587288e-07,
                3.741237880740038181092208138035393952304292615793985030731363e-05,
                -8.520602537446695203919254911655523022437596956226376512305917e-06,
                -3.332634478885821888782452033341036827311505907796498439829337e-06,
                1.768712983627615455876328730755375176412501359114058815453100e-06,
                -7.691632689885176146000152878539598405817397588156525116769908e-08,
                -1.176098767028231698450982356561292561347579777695396953528141e-07,
                3.068835863045174800935478294933975372450179787894574492930570e-08,
                -2.507934454948598267195173183147126731806317144868275819941403e-09
                
            ]),  

            20: np.array([
                7.799536136668463215861994818889370970510722039232863880031127e-04,
                1.054939462495039832454480973015641498231961468733236691299796e-02,
                6.342378045908151497587346582668785136406523315729666353643372e-02,
                2.199421135513970450080335972537209392121306761010882209298252e-01,
                4.726961853109016963710241465101446230757804141171727845834637e-01,
                6.104932389385938201631515660084201906858628924695448898824748e-01,
                3.615022987393310629195602665268631744967084723079677894136358e-01,
                -1.392120880114838725806970545155530518264944915437808314813582e-01,
                -3.267868004340349674031122837905370666716645587480021744425550e-01,
                -1.672708830907700757517174997304297054003744303620479394006890e-02,
                2.282910508199163229728429126648223086437547237250290835639880e-01,
                3.985024645777120219790581076522174181104027576954427684456660e-02,
                -1.554587507072679559315307870562464374359996091752285157077477e-01,
                -2.471682733861358401587992299169922262915151413349313513685587e-02,
                1.022917191744425578861013681016866083888381385233081516583444e-01,
                5.632246857307435506953246988215209861566800664402785938591145e-03,
                -6.172289962468045973318658334083283558209278762007041823250642e-02,
                5.874681811811826491300679742081997167209743446956901841959711e-03,
                3.229429953076958175885440860617219117564558605035979601073235e-02,
                -8.789324923901561348753650366700695916503030939283830968151332e-03,
                -1.381052613715192007819606423860356590496904285724730356602106e-02,
                6.721627302259456835336850521405425560520025237915708362002910e-03,
                4.420542387045790963058229526673514088808999478115581153468068e-03,
                -3.581494259609622777556169638358238375765194248623891034940330e-03,
                -8.315621728225569192482585199373230956924484221135739973390038e-04,
                1.392559619323136323905254999347967283760544147397530531142397e-03,
                -5.349759843997695051759716377213680036185796059087353172073952e-05,
                -3.851047486992176060650288501475716463266233035937022303649838e-04,
                1.015328897367029050797488785306056522529979267572003990901472e-04,
                6.774280828377729558011184406727978221295796652200819839464354e-05,
                -3.710586183394712864227221271216408416958225264980612822617745e-05,
                -4.376143862183996810373095822528607606900620592585762190542483e-06,
                7.241248287673620102843105877497181565468725757387007139555885e-06,
                -1.011994010018886150340475413756849103197395069431085005709201e-06,
                -6.847079597000556894163334787575159759109091330092963990364192e-07,
                2.633924226270001084129057791994367121555769686616747162262697e-07,
                2.014322023550512694324757845944026047904414136633776958392681e-10,
                -1.814843248299695973210605258227024081458531110762083371310917e-08,
                4.056127055551832766099146230616888024627380574113178257963252e-09,
                -2.998836489619319566407767078372705385732460052685621923178375e-10
                
            ]) 
            
            
        }

        sym_coefficients = {
            4: np.array([
                0.032223100604042702, 
                -0.012603967262037833, 
                -0.099219543576847216, 
                0.29785779560527736, 
                0.80373875180591614, 
                0.49761866763201545, 
                -0.02963552764599851, 
                -0.075765714789273325
                
            ]),
            
            6: np.array([
                -0.007800708325034148, 
                0.0017677118642428036, 
                0.044724901770665779, 
                -0.021060292512300564, 
                -0.072637522786462516,
                0.3379294217276218, 
                0.787641141030194, 
                0.49105594192674662, 
                -0.048311742585632998, 
                -0.11799011114819057, 
                0.0034907120842174702, 
                0.015404109327027373
                
            ]),

            8: np.array([
                0.0018899503327594609, 
                -0.0003029205147213668, 
                -0.014952258337048231, 
                0.0038087520138906151, 
                0.049137179673607506, 
                -0.027219029917056003, 
                -0.051945838107709037, 
                0.3644418948353314,
                0.77718575170052351,
                0.48135965125837221, 
                -0.061273359067658524, 
                -0.14329423835080971, 
                0.0076074873249176054, 
                0.031695087811492981, 
                -0.00054213233179114812, 
                -0.0033824159510061256

            ]),

            10: np.array([
                -0.00045932942100465878,
                5.7036083618494284e-005, 
                0.0045931735853118284, 
                -0.00080435893201654491, 
                -0.02035493981231129, 
                0.0057649120335819086, 
                0.049994972077376687, 
                -0.0319900568824278, 
                -0.035536740473817552,
                0.38382676106708546, 
                0.7695100370211071, 
                0.47169066693843925, 
                -0.070880535783243853, 
                -0.15949427888491757, 
                0.011609893903711381, 
                0.045927239231092203, 
                -0.0014653825813050513,
                -0.0086412992770224222, 
                9.5632670722894754e-005, 
                0.00077015980911449011

            ]),

            12: np.array([
                -0.00017906658697508691, 
                -1.8158078862617515e-005, 
                0.0023502976141834648, 
                0.00030764779631059454, 
                -0.014589836449234145, 
                -0.0026043910313322326, 
                0.057804179445505657, 
                0.01530174062247884, 
                -0.17037069723886492, 
                -0.07833262231634322, 
                0.46274103121927235, 
                0.76347909778365719, 
                0.39888597239022, 
                -0.022162306170337816, 
                -0.035848830736954392, 
                0.049179318299660837, 
                0.0075537806116804775, 
                -0.024220722675013445, 
                -0.0014089092443297553, 
                0.007414965517654251, 
                0.00018021409008538188, 
                -0.0013497557555715387, 
                -1.1353928041541452e-005,
                0.00011196719424656033

            ]),

            14: np.array([
                4.4618977991475265e-005, 
                1.9329016965523917e-005, 
                -0.00060576018246643346, 
                -7.3214213567023991e-005, 
                0.0045326774719456481, 
                0.0010131419871842082, 
                -0.019439314263626713, 
                -0.0023650488367403851, 
                0.069827616361807551, 
                0.025898587531046669, 
                -0.15999741114652205, 
                -0.058111823317717831, 
                0.47533576263420663, 
                0.75997624196109093, 
                0.39320152196208885, 
                -0.035318112114979733, 
                -0.057634498351326995, 
                0.037433088362853452, 
                0.0042805204990193782, 
                -0.029196217764038187, 
                -0.0027537747912240711, 
                0.010037693717672269, 
                0.00036647657366011829, 
                -0.002579441725933078, 
                -6.2865424814776362e-005, 
                0.00039843567297594335, 
                1.1210865808890361e-005, 
                -2.5879090265397886e-005

            ]),

            16: np.array([
                -1.0797982104319795e-005, 
                -5.3964831793152419e-006, 
                0.00016545679579108483, 
                3.656592483348223e-005, 
                -0.0013387206066921965, 
                -0.00022211647621176323, 
                0.0069377611308027096, 
                0.001359844742484172, 
                -0.024952758046290123, 
                -0.0035102750683740089, 
                0.078037852903419913, 
                0.03072113906330156, 
                -0.15959219218520598, 
                -0.054040601387606135, 
                0.47534280601152273, 
                0.75652498787569711, 
                0.39712293362064416, 
                -0.034574228416972504, 
                -0.066983049070217779, 
                0.032333091610663785, 
                0.0048692744049046071, 
                -0.031051202843553064, 
                -0.0031265171722710075, 
                0.012666731659857348, 
                0.00071821197883178923, 
                -0.0038809122526038786, 
                -0.0001084456223089688, 
                0.00085235471080470952, 
                2.8078582128442894e-005, 
                -0.00010943147929529757, 
                -3.1135564076219692e-006, 
                6.2300067012207606e-006

            ]),

            18: np.array([
                -1.5131530692371587e-006, 
                7.8472980558317646e-007, 
                2.9557437620930811e-005, 
                -9.858816030140058e-006, 
                -0.00026583011024241041, 
                4.7416145183736671e-005, 
                0.0014280863270832796, 
                -0.00018877623940755607, 
                -0.0052397896830266083, 
                0.0010877847895956929, 
                0.015012356344250213, 
                -0.0032607442000749834, 
                -0.031712684731814537, 
                0.0062779445543116943, 
                0.028529597039037808, 
                -0.073799207290607169, 
                -0.032480573290138676, 
                0.40148386057061813, 
                0.75362914010179283, 
                0.47396905989393956, 
                -0.052029158983952786, 
                -0.15993814866932407, 
                0.033995667103947358, 
                0.084219929970386548, 
                -0.0050770851607570529, 
                -0.030325091089369604, 
                0.0016429863972782159, 
                0.0095021643909623654, 
                -0.00041152110923597756, 
                -0.0023138718145060992, 
                7.0212734590362685e-005, 
                0.00039616840638254753, 
                -1.4020992577726755e-005, 
                -4.5246757874949856e-005, 
                1.354915761832114e-006, 
                2.6126125564836423e-006

            ]),

            20: np.array([
                -6.3291290447763946e-007, 
                -3.2567026420174407e-007, 
                1.22872527779612e-005, 
                4.5254222091516362e-006, 
                -0.00011739133516291466, 
                -2.6615550335516086e-005, 
                0.00074761085978205719, 
                0.00012544091723067259, 
                -0.0034716478028440734, 
                -0.0006111263857992088, 
                0.012157040948785737, 
                0.0019385970672402002, 
                -0.035373336756604236, 
                -0.0068437019650692274, 
                0.088919668028199561, 
                0.036250951653933078, 
                -0.16057829841525254, 
                -0.051088342921067398, 
                0.47199147510148703, 
                0.75116272842273002, 
                0.40583144434845059, 
                -0.029819368880333728, 
                -0.078994344928398158, 
                0.025579349509413946, 
                0.0081232283560096815, 
                -0.031629437144957966, 
                -0.0033138573836233591, 
                0.017004049023390339, 
                0.0014230873594621453, 
                -0.0066065857990888609, 
                -0.0003052628317957281, 
                0.0020889947081901982, 
                7.2159911880740349e-005, 
                -0.00049473109156726548, 
                -1.928412300645204e-005, 
                7.992967835772481e-005, 
                3.0256660627369661e-006, 
                -7.919361411976999e-006, 
                -1.9015675890554106e-007, 
                3.695537474835221e-007

            ])
            
        }
        
        coif_coefficients = {
            4: np.array([
                6.309612114309468490753696608619526520153127603444406835368201e-04,
                -1.152225143769973488683007937016166047881572156705066038094891e-03,
                -5.194525163470323267558201363327294331811309729430512113592118e-03,
                1.136246148326482276463392678363118465908960082105224676102131e-02,
                1.886723856956305960822813160712701905823879297781452350370094e-02,
                -5.746424190192718517290527411385172124443396690932404284859269e-02,
                -3.965265296244913762718094206756579981738035770770645437919302e-02,
                2.936674050161006858761278962798582650835466243678172528509866e-01,
                5.531264550395492870333469741987846570947502710783248169642137e-01,
                3.071573096678856987248881030393884808414165269795297009902001e-01,
                -4.711273752389572084912399351781012121935994396763702238263689e-02,
                -6.803811467802056988332974920928626798429778679560269769187728e-02,
                2.781363695846951303169163645831936314699164412528991864702607e-02,
                1.773583142270308388403079552822372238681544967313003044695583e-02,
                -1.075631615508724933047071603601897536695959225169888787867102e-02,
                -4.001010844950535391911552472397083276670126595827549403173754e-03,
                2.652664913530499860820143301690017184933302935238430721089152e-03,
                8.955939276952843603555618778866181384528643960440369133096025e-04,
                -4.165001950941708741516836418852536615951250588002878691463468e-04,
                -1.838296167136253805617482342622910940008368723403836355183423e-04,
                4.408022661597206973006038672236031501663774161685451815597956e-05,
                2.208284691230832960893331999804142845136324572860276715790883e-05,
                -2.304919162676504406778986897925054839632903355820414483306851e-06,
                -1.262179179994622253884862172782890488140153502131112374520603e-06
                
            ]),

            6: np.array([
                3.590369176713147297619137585162985487882983106558813483919654e-05,
                -5.739587600308579302553116112640931312834124316491419262693257e-05,
                -4.416681189774217015420887950711066328841194295133755225305844e-04,
                7.718952365964601416123598337617069164684563206275891099236221e-04,
                2.502464949920583984721024494943552146200854870661622211002418e-03,
                -4.970540926794084916072709193212250530229884674851059194676904e-03,
                -8.649031599946572670088689962363342931064457587276457635862837e-03,
                2.096272704497140779792663941456374769474253019820508756967019e-02,
                2.035485665853858604541136567848434116598037957308057353920592e-02,
                -7.047945564795552885905434147081164203757922879137146339823510e-02,
                -3.448140611368923447131875491841937617457159299006945091335206e-02,
                3.010998878403483951866118786441379902683440623823004392113350e-01,
                5.433431541205752976643226361323847389491208513427704619816300e-01,
                3.114106686884303879320332890564758567306967030720816157048784e-01,
                -4.108920994584877203854246950993119698209208008049962179892675e-02,
                -7.938037857340304740867638342147592451705918503253249849143539e-02,
                2.959417996664270964779250587338231669479158250990737014414477e-02,
                2.749324945396978289421721884832761949259069726774638450310483e-02,
                -1.622820901345195945858655272139343256940218447777075044002063e-02,
                -8.944948800734973559175903045029991278019908264185511730556261e-03,
                6.781924902353432370456282863377674743820538634665380239602198e-03,
                2.727776322637165251200756406544564359327985321401403409245472e-03,
                -2.173603470504406274543289770274934991733554729244606459300157e-03,
                -8.184301467772110627838702680469158860544118224504527036324346e-04,
                5.443695006423825218320707989235387077885356717678678221237514e-04,
                2.299669354496271337796680394777537358902688275513954507765924e-04,
                -1.093025858275705388257100771765109469841731265349469854748449e-04,
                -5.323102894235956524250869703703947941287269765076967124254140e-05,
                1.749138884456354646795465632327170008020712055425505484223307e-05,
                9.291277996211799255766657547295162218792966588358292566578482e-06,
                -2.067852860108562040355056354764683583070734740977224663511355e-06,
                -1.173528057754959701015486666538811237336231287996985858558749e-06,
                1.595231380068613024221709499993144713297922814623646799204434e-07,
                9.548236102970597211555688470325396069418862428946106509526618e-08,
                -6.001316648399794543233636397364817876191104394511939069108879e-09,
                -3.754092421718877429714314525761519021787631896344301745834088e-09

            ]),

            8: np.array([
                2.089031388199542217649735304633077946477575993553137874997499e-06,
                -3.088829676466960594403785936495123295795735325141186563064826e-06,
                -3.415065199420814308581377665735877442810613593316182887801764e-05,
                5.336794978475752885866749586223668039582360880077534324830961e-05,
                2.625452092146307108027768728326461036005400582791844219135485e-04,
                -4.409238208772274245312366838988697089610792049225817119782188e-04,
                -1.260955244697859087126122671343741939804055800993471565939717e-03,
                2.334035748516809401796699851512493931521487402803856088184519e-03,
                4.238998515964122916906367014472885263525332429616686168386780e-03,
                -9.010216682788485374574179959374952745626145790175446525921665e-03,
                -1.059137210972160452062877264732854070957273640727973500291258e-02,
                2.784023497265315551670806338623371354680279388669611745037381e-02,
                2.038491393825460625255433218588522954822776999829791972608492e-02,
                -7.790193780817760648856650048481215968473342802126754335290911e-02,
                -3.091398960464199635355286295557605183007519885588326376800431e-02,
                3.049113846932028296232414935045248095543039057351616871735909e-01,
                5.374812703269839615372906413514102630694929400948606989937313e-01,
                3.135612340595966380418077448086007870950549040456326333016594e-01,
                -3.667108316665038246204915903550010028035229188747930760164446e-02,
                -8.570923901203457457230067054960180625904745972345544735005669e-02,
                2.912276318941918093502808667205448538832711003842651923199100e-02,
                3.411957880301561499047582538207723820508873324357307771206279e-02,
                -1.884914078883376071043287013172570992844993887415459298291641e-02,
                -1.342459526650064517082192966318056581890805569912583356614454e-02,
                9.982558825082415904373108133470460186315362848702191453854950e-03,
                4.996294194193990739772329108378853011245087219628720892888460e-03,
                -4.353415716030435524873558659254500246467092155734985247834619e-03,
                -1.798882274878169625580021134613003566863070625422298385086326e-03,
                1.580842866685999532270584538283553531040029730619088591607990e-03,
                6.341164354094166487421798386547881496331208497274921165613427e-04,
                -4.859037288504776883185923185674204816335250660367189593401172e-04,
                -2.105615022500261821665621601578029342187313061309595147668812e-04,
                1.284762650553455535249206074613997094898698286922036784576671e-04,
                6.190332439714985153834932259246488292329875513962818749340013e-05,
                -2.932710247776567240870160300128192249260665410455632214571613e-05,
                -1.541634258578732960762233596163970199686495285352470015267722e-05,
                5.679130231196248852811714735791066544261806333156564637706958e-06,
                3.179814253819903951090335509892218398493686680727385157906016e-06,
                -9.018823843695175549580166675906964282301328192772638509290562e-07,
                -5.313922705051620291263120753790527283196870682052587236468039e-07,
                1.123841380424949688574412705744289982140965409566073018148117e-07,
                6.910143395859795983361485345968765950977315740669289349714194e-08,
                -1.028133863272738862101812736488937814136249072478179304322756e-08,
                -6.555732343557023119114074649273108865362704549509543350446188e-09,
                6.130612315575721972473587395696526436552798806104270539014282e-10,
                4.033910072490666571003953018881489938766267669840899254802129e-10,
                -1.785744077894230068079099924407862882873224386100989050429950e-11,
                -1.207731024612356156550871498168833597517735826635815624658975e-11

            ]),

            10: np.array([
                1.232039860648044172279299405224082875252688628145893763395790e-07,
                -1.727295600804314762711191670132331791341141012661151334481794e-07,
                -2.511081517709769407961552319066117068245327429766666733928049e-06,
                3.658544046042552874351627900962366978528997860123373895778793e-06,
                2.436668276348995654567141715803151760606013118025710110377401e-05,
                -3.722543982033220274394394471108112000512191070987312940916252e-05,
                -1.497469279949762172542844959871018020917187701428092381975699e-04,
                2.428593780445920993243261353647084659003272232610773863151794e-04,
                6.540313182060373357098490399551418144208877502266803289923939e-04,
                -1.146063191568871560182378726825944083414392177714466101235875e-03,
                -2.159498802066973425125604747126061872540389369353813104148470e-03,
                4.198356898750693446005403941056755251392636143022056890090725e-03,
                5.598275450294209413911534747591226887261098750954757306041384e-03,
                -1.260095805571421166223679712763560488266840720081803933722030e-02,
                -1.168247265355164122837179014169010489974316491167398434017964e-02,
                3.285412351493396730558710291243592888780292689130164184828513e-02,
                1.996368405025267515773975348713442321055648689376329104127913e-02,
                -8.268628841732119164746367518414478774806468603519900610269584e-02,
                -2.827515877359611439071634624194631537427006948348240041241060e-02,
                3.072295399526691328155262418641709088201200529352508961256835e-01,
                5.334767884906935739862412544069281108017755758434730066259645e-01,
                3.148528691610333337017175073118974445216093370484743945217914e-01,
                -3.333673484145423901496513466029874130150784824285513273324710e-02,
                -8.973828824876461620729131462736908322846203417126514244115363e-02,
                2.804975877403786393498709022507676088711706121355859697479949e-02,
                3.882650078944377967276663169043218713908993336081868910959595e-02,
                -2.001823819093022389853947550669865247947997489243455484715571e-02,
                -1.715959267288721579873571730849821259719260958329570391883719e-02,
                1.216641740406415476398704875951061876471553491032831272757748e-02,
                7.287002668222967317616933795891484580054714258414483676611073e-03,
                -6.330873585683910945116572500327893678512281593087324528956428e-03,
                -2.982656931766638403179439090660944850553111019029093184942893e-03,
                2.842726797184870190904247769487845255184476983143715832751782e-03,
                1.194989100375986838359310533134452087293580850721847113981799e-03,
                -1.113592929026716220582486976294877082540073971334172516478939e-03,
                -4.665959023435428623124863826904417915798780109069842899171733e-04,
                3.854915448171689185378413676726041277985033697385268395398737e-04,
                1.722736489049248280735630694200218710841097211364504157426810e-04,
                -1.192039440276314665828270011182318354192262701354872993867613e-04,
                -5.799804551608036312810594836126727444524814767625101691871260e-05,
                3.303955116680311017462087431863046046226866796792060186027460e-05,
                1.735375106985050789058251093166552848987592399630060085283037e-05,
                -8.153689583347474492592925111165323709051679031024702923650800e-06,
                -4.549758014112714450559595397423919633198378184124113284457878e-06,
                1.765789027517910443710091424096930382691903616281733579514694e-06,
                1.034104799224371158938634470768393243015388383126290286799001e-06,
                -3.293437798170512614804826256037338836342628817269828495710584e-07,
                -2.008825017273243555706624872035287742407494975566457013532182e-07,
                5.172869892752758054467150354777867503503057315845912340980461e-08,
                3.267471887025676044777185234904542674259187212800749921513620e-08,
                -6.644210603985367626472026676249006537350458801953377329083388e-09,
                -4.326722848192605397244652678298064482622875881609332553562911e-09,
                6.694767246505386091091135023442214060965867621406459703646360e-10,
                4.478193476940001390457010880530025539995676698350272513506529e-10,
                -4.958883523601264332798684165341380344606385498242825617652400e-11,
                -3.396977896617646756144544675014526730130390520604930211664642e-11,
                2.399541927897950965447863495074910322552410081226759270966602e-12,
                1.679108441896732974456456195021048198285552771033686283521003e-12,
                -5.688326582012783070559328035350356616163807538811872116072541e-14,
                -4.057351322008929507004790032757210978914475486123608161502457e-14
                
            ]),

            12: np.array([
                7.332768095940030936479170284005726526900547838823690875511772e-09,
                -9.882788960094173321966534093367099204293628590516819427395258e-09,
                -1.789770690933674811780047200109598433010386971973430500672055e-07,
                2.482235718295242398333562594286195512316082783324858732252918e-07,
                2.096862898770904613564680054212556937787154121601629543533841e-06,
                -3.008997523302885197296541933722942006923516241629763269568385e-06,
                -1.569727511606401439531655092040058072751445499110659438977086e-05,
                2.347282446659006948884988502182500910534796840878776320306027e-05,
                8.432620671960839513456175441990492843161437159914478159180496e-05,
                -1.326465700910231806666155456982630828426491024439193157580022e-04,
                -3.461069031961523260598540665989975463806418435597964924450827e-04,
                5.801724592109383434087721189210231779950668973412340708531782e-04,
                1.128329952931538448642997807830809340563912699376148776100497e-03,
                -2.052978207989856468257756671236218003175082899217794093393105e-03,
                -2.998854718805581165102352821152213608341151163107294684246684e-03,
                6.087234661002692098937246236052456417362244403536977448648695e-03,
                6.618258248500649305698119745808151708404790949797235636697129e-03,
                -1.565844764466259880161945578291943699894979290174981301878469e-02,
                -1.229143532595011743051583354556862863433008454113067034110364e-02,
                3.663359030520896940491446552702346213307676159344592871561174e-02,
                1.940158311172772932244832520273815443263367988550797208188773e-02,
                -8.602421369693663560157681223178103065887873009243441444273671e-02,
                -2.622309610147498279896640360042796723325043337619084753451538e-02,
                3.087901191936800440665016928578559620370136549385877375418705e-01,
                5.305215546028922252760737677862501004955798466743925981589890e-01,
                3.157101125097144187884255713018906584467729236429617965600542e-01,
                -3.072728270411850832025519617026920233823691270616686168610683e-02,
                -9.252355517407954901591096183036942267909813631619741203079509e-02,
                2.685426980489526041311526911968158600872135457665305597171601e-02,
                4.231906584194910461336004572125137067789978502941750699346161e-02,
                -2.044171277278771763990740324636394218858904394719947562326197e-02,
                -2.023145788215137568397333973747514178822985181848891022548418e-02,
                1.360136074289957261858358098198061002684141161420690992513613e-02,
                9.426267566785124441978318969535742805562416304113067761168412e-03,
                -7.945708281838580982329878679291156067815423974682242221896984e-03,
                -4.244616137562462768873148640133872748101997290450405726506771e-03,
                4.099701294107222470709340142349077619300436310693220618061200e-03,
                1.865723923369076273507077887878603520484228647302554964863350e-03,
                -1.883095146836284131126558963690882906898471660722337699052360e-03,
                -8.050306441934266570411103136671969129999167330943811990532568e-04,
                7.774244768363498320173652454360791629397769478205798411568457e-04,
                3.372847962851042846971724663631080138529114657505401824166820e-04,
                -2.913208318185371820345028586920081498099751816901944041981459e-04,
                -1.340525559954698716569234001877227886256687091468901002407760e-04,
                9.982127673611594435680485331533411291981760920599082733502195e-05,
                4.937348728732130704294498684307923950522584256106944886949448e-05,
                -3.135036716312241024722693180559594774556478340860978546951440e-05,
                -1.658147773498940772484726369548058692747045913396859511266770e-05,
                8.993369381780249884815177697768622600696214964193331328463550e-06,
                5.029634518357754652723486937747064581822127275361432214835696e-06,
                -2.337864167664466494570925080931611944904459384149351585277512e-06,
                -1.368676631106717262348517888568825801321041470548296848624890e-06,
                5.450688318062644286926839313049161286349015828217309026636711e-07,
                3.316523922200394953147539061914190708715734274178414348860243e-07,
                -1.126508114108817402586366374763002332801656314726353024056859e-07,
                -7.087035083421007145362900821929976013240319835720189106840565e-08,
                2.036136552214949970328712725606531020556011014972233106738542e-08,
                1.319046726965912968164902682289037946241823978447803297147618e-08,
                -3.166087228464481990319888550523695148079523238750557992010525e-09,
                -2.104991149449598511738256933418413456831105806964526595267674e-09,
                4.146945431639040971236501326093312709747378328969720686955287e-10,
                2.821776098897944456514363403112985675647966425504805181915693e-10,
                -4.446983453406239471384232757602885317329111550023751533862821e-11,
                -3.089624808780293616300620576734718588630028421505260673719541e-11,
                3.747462360879854551489729939613548244791307999347455031364712e-12,
                2.653081274384644726529610503659130177381947905208003616541403e-12,
                -2.326413554174593468421370682954805683688973923244290583476656e-13,
                -1.675405289088832668656302656638525011959950143853262083260676e-13,
                9.457233677790636292829124094363707169383163229929980763002159e-15,
                6.917698090475727804437168736067302147625040054118083556555473e-15,
                -1.888230812078774308964339134901795324778762733781901178118498e-16,
                -1.401017335540698807093219863467094751924636611380629198255055e-16
                
            ]),

            14: np.array([
                4.393123283287643046743977676392679809833123671791969857529554e-10,
                -5.740995333980705032482946798804467194492616738218164095035288e-10,
                -1.248927009234748737577807595315202881486499763243765085950971e-08,
                1.668938708534669081372944925855130859570883667030296283192275e-08,
                1.714224718466457012729254240886670886351889068326223437908249e-07,
                -2.350888489707823711598280869672645467891128086655653747378426e-07,
                -1.512829449512444398231569819651340325454203862764615475827846e-06,
                2.138843028494803759906484297432258680083063727505990520765838e-06,
                9.645189410175859129875925155219070194081512175741287765540858e-06,
                -1.413900766434184664705667161036292966126778120705989526301092e-05,
                -4.732386374886606069931596084808261069441902397080602834581236e-05,
                7.246665915416318653041426061722482786676878913517175624718883e-05,
                1.858717516638060924675018895058421783537325657288962327083514e-04,
                -3.002639346667087045056450058456524356780635529605230858304448e-04,
                -6.001981648119978322839905692747076742955350870879313864711891e-04,
                1.036704424281183769332139455241059670502046121189437350622494e-03,
                1.624019729102622430009407806264396637075700567293622239292888e-03,
                -3.056866654227471285910973139305702040302592610826831936007958e-03,
                -3.734374338375411359548223317593068662165508326760318658468879e-03,
                7.878974156362307531137246310651783340668870035859860685992973e-03,
                7.375794892775370758210034597418329565084392014608514718594919e-03,
                -1.824112316356241062692741179162085194558935295694349102012547e-02,
                -1.261644961352131486551701382111180567640901225706461078977920e-02,
                3.957213740580164637883912093052435411100033612855489943952285e-02,
                1.881013375897047936537530404984248905528105177371268733601760e-02,
                -8.848531745012440411869086432922856738256941097681738588710806e-02,
                -2.456831883802970358635588048610460583666496666472048714250036e-02,
                3.099141258514769597675719014297798938256245460277150903434604e-01,
                5.282263993480420420172683726700426615634588134049161997619639e-01,
                3.163176118910136471847844244749096048202155473691440639981631e-01,
                -2.862162705070505721847062425772578719710517153178747344517326e-02,
                -9.456098562568806415195259578154116428430268415200065101526812e-02,
                2.569051606124748855707310139514692975138855764331441058027644e-02,
                4.500466183802795354926526381495033532360504829689303112753676e-02,
                -2.047021532120584933449635791950977974026461349249053431599797e-02,
                -2.277014831481950414178652294664971699995306130850012029895679e-02,
                1.452361964346076643465698934593935628651549016326324569145137e-02,
                1.136128541937039082819287050631790459539185066230834792169280e-02,
                -9.209420947381265408066732190659507079985769827890316211408732e-03,
                -5.504969422021670816364481890406139436891358063842746391250159e-03,
                5.243747074749862954985821475569406094355637198674133818712452e-03,
                2.601674598427237622587421382305601947017094209097298433834035e-03,
                -2.697275841549192002303803931030430917736443859609363181433549e-03,
                -1.207776471356184889908600913725134183482141825908028112001291e-03,
                1.262622737054852256202461193382270265994430106051249583099008e-03,
                5.499311966045329956589364039445100979613421696316486920186038e-04,
                -5.422272627380624698839955658312215512244309349484916450185708e-04,
                -2.425184361340171436100075350681685661504913784969748899389596e-04,
                2.152149496400025476355694208172147853936641059086477755698365e-04,
                1.017555903218396117566574602158457196612571864784370737617320e-04,
                -7.935125388684553688655161870002244461407761128159434896618062e-05,
                -3.998277597219932662226493843559158394980004861650575475073792e-05,
                2.721796546580936689236981518793293817082739932936290854597108e-05,
                1.455457611510765292828084081835640403374221862390765492386559e-05,
                -8.665251169633984802148726995857663363842070697439942022312573e-06,
                -4.876002876304524386897822246961544519628259634511055566637692e-06,
                2.547630497377554690874245620888763103208548188356120375663417e-06,
                1.496291521165122830795751824395745883743697658779928306182602e-06,
                -6.871963182955767930114979093149987762546939511820085867823395e-07,
                -4.186054213338905216716743937485713975287167010801084873077525e-07,
                1.688323085510447043387946782295494719025294305992339556134599e-07,
                1.061608664532340347260400721455574451686604605297267706650340e-07,
                -3.748126052504886126462262044258726754387739289902914735975186e-08,
                -2.423790421295234792457591882318039900764790491363232906013318e-08,
                7.451944128021296384873848910815562162615603046168848323657834e-09,
                4.940829113027976152032509192714512864500880531926251999539656e-09,
                -1.313004290651891746787587770064129324937346786322188934177725e-09,
                -8.903006190166202390134120838864396696475015840820998020804486e-10,
                2.024339408983577773846670331538285833569817328592031229378977e-10,
                1.400716332649913272902011493738096845560270049348128272163217e-10,
                -2.687843639588594104182180535839092397502172743578767496300069e-11,
                -1.894326416951989057103502558801200560928286148276804817046860e-11,
                3.010449065125004813763195657162392547592377042598795440577733e-12,
                2.157549110009031291962129877779262524544188824969196959112637e-12,
                -2.765131213310687469788780767616475716770096486689988092675382e-13,
                -2.012365100006663638325338350119352463903184738855668161185981e-13,
                1.999559651890099694974046277400337493312467655228527142562129e-14,
                1.475855904098499257323658940826580143845487753742438097885182e-14,
                -1.067284385873308952698526062594338734883390319779112369515680e-15,
                -7.980454732861187078908378609623987154745352892645906516335706e-16,
                3.737960558513592434172838302437103561627990707012528832920768e-17,
                2.828736827706445597408742152789813333751511825684331285246309e-17,
                -6.443221017103948534696419228196665121335677484790396728190832e-19,
                -4.930480277882556230626331748820167974609092329853622801401922e-19
                
            ]),

            16: np.array([
                2.645128227931334401194749017856094903839224759604187535975348e-11,
                -3.371203198492327805593180795398582247961552853458158404332701e-11,
                -8.582602955015851169989985547605915833769704579350018283905453e-10,
                1.113682743874024896922872631560006089322116513037553196433140e-09,
                1.350357555669007302187662129540475982947984508250679168402207e-08,
                -1.788542662216945768696335511240007863403120034978963421466759e-08,
                -1.372399767643349435868829666738563944471884881660198607643932e-07,
                1.861142798232072777457875152815716474831537306031011659394987e-07,
                1.012632916853084889127303847166996705778109099232881893357767e-06,
                -1.411391218929900871875409836854758822959995175269209988265964e-06,
                -5.780354906513060544090253238716694637224354416047278875195167e-06,
                8.319552925349192408642980463945086193729912325909182155797371e-06,
                2.656172937335282438452193694808438866757101525885555802877363e-05,
                -3.971488503705784806195172735954055483778562353132473949420383e-05,
                -1.009502477694915360037551527344779468467449497309371492607906e-04,
                1.580205984850860534574382720595384850826996029171338643269624e-04,
                3.235585956460851636390368611428001979093146497993005344305241e-04,
                -5.356766020478135601304959841352994036589791570941083598445719e-04,
                -8.873556546319179065472262621811119401586608437112185894641021e-04,
                1.575478281351532632439717118803866388929199851338529206979138e-03,
                2.105606651204431619054524746734864557623457229083947484722320e-03,
                -4.088191894353650561276869582147927639352373035186017974748492e-03,
                -4.360872292782198728376270454745337063294048791901294558973734e-03,
                9.529568586822569351636224042126142702339784399550130407812201e-03,
                7.937554616751835390855349461479084645184690272876975812761538e-03,
                -2.043028062273575036423529610008583445387419918322244014076844e-02,
                -1.276805798943377800134681508900535312774995954006995157514628e-02,
                4.191756976239118832120686348770409281363202997039966458608067e-02,
                1.823220381522837114361006424809362329414770645451392462449888e-02,
                -9.037537219708957768297195651417043288020180323453952191219619e-02,
                -2.319696593669936172505243393626168348704758643822052626742965e-02,
                3.107636928082792940641010571409269845541349652957861643505019e-01,
                5.263779607858160898968654079428530858936436413545697317378081e-01,
                3.167685981610576430160454114053628826549777499820093838585069e-01,
                -2.688002764399130975457186260346246083982252335484396969696049e-02,
                -9.611413622779535731607299381683923415585409438866982806312433e-02,
                2.460702264184366170433044783596672126378075093050623290409127e-02,
                4.712982774514209557951414612253477983062538454664569371378627e-02,
                -2.028535796367687397692592233666898932654122251735124185611584e-02,
                -2.488947090480479804467455088466028171550905433401327138474797e-02,
                1.509891466100476055081827485608676509355525843509560496666700e-02,
                1.308946215944044192535019406077351673456069366724670016932535e-02,
                -1.017883680802027111277390598900318783317279547588070199634251e-02,
                -6.719748071003458935775571012030544444136724430402220957162335e-03,
                6.238935489467385921022852560870393671940489207452244538094472e-03,
                3.367468902298941859370206452925695206983662336670801038560071e-03,
                -3.493551700182803646132263836442232208288107750606295145197587e-03,
                -1.656892742742846792662641923332649254682158396970453428791079e-03,
                1.797580707568879158693851162651173871535491718081800368907782e-03,
                8.023813584888036977682855962559617079147220211451113235479547e-04,
                -8.554898439358329127957776138969823280630767426284649193621767e-04,
                -3.803250541195305567062453832052319106641157897723285573667716e-04,
                3.790575215750319491406179627066855114144121793545714885424013e-04,
                1.743405946247572050905785206176608832450147638063148826743472e-04,
                -1.572439781316405883265776380849622489840291930399907686729106e-04,
                -7.624948592584476281257978178990423864516589094309239278548039e-05,
                6.128060596774506984228013865022369414316454857306786928520834e-05,
                3.146741963266068084535293135528229727240575644439933447074425e-05,
                -2.245327295507508821937104934719536410602401822650676684612963e-05,
                -1.216243182507186686293172059854826389902098520645342122978134e-05,
                7.720917364617828003652627867578175616946793895014715674935806e-06,
                4.381753178661449645296516382515863584261691809111376008934184e-06,
                -2.482767124382555232483399147672417058164552715497813674691440e-06,
                -1.466343698163771614780524818641106403735083198445173705132776e-06,
                7.432014174835368770981871416234950435655553162638884480980583e-07,
                4.542989331759269644535718413196051785388101460827659003970839e-07,
                -2.060699879933986058206760300398806699720723820737944360367781e-07,
                -1.298170865048347187816076578378402307087125075336611133383038e-07,
                5.264581641375993977610164728920521257086259803613235153366270e-08,
                3.406393391619068289195417747073909213446800676676765817676367e-08,
                -1.232185691522856953729451450757280208371851915642712294292861e-08,
                -8.166093443152050070015881861916421702970930717440939870025784e-09,
                2.625409011502555900921203294713520941212542142978903897341494e-09,
                1.777971486566651937150629742259638331676290922471013840418127e-09,
                -5.055670327267217324394512474432436609546961385665820073629149e-10,
                -3.491603047784209234885018449563067499142505674739795662842523e-10,
                8.724442027269310202793317644100398216549268990858642429012803e-11,
                6.134056646089015827615754897419277972739575045939973674430929e-11,
                -1.335550933533140093069772884082926341856038121300357216420744e-11,
                -9.545001301055681232254913151946668780573427381542116387716243e-12,
                1.791132091052570705585609717173338686203233385162086497884597e-12,
                1.299479612944140546458425080979636378248568664374156541007765e-12,
                -2.071542478174027600308270770710599707024301130761618879837078e-13,
                -1.523876419589572596433135600175398293765409391592690642809664e-13,
                2.024011564013098795384504309899456379953546444981404140928647e-14,
                1.508090533430543564179721448102668377867975040540446828012097e-14,
                -1.624316869855319846554453444493486257563508484962017834581348e-15,
                -1.224719779181149805165600696876308523367619824015832031858679e-15,
                1.027939569018525333323110570745538777072560620646729968488678e-16,
                7.836461641294003176782800892601140107677607857155479918585838e-17,
                -4.809623970748619654544928861639842603928203458148585584400867e-18,
                -3.704428468500691125388142845245956973807333959654959653370468e-18,
                1.479077310414365270465857340835402997778146774718460154867300e-19,
                1.150168591577669048697174066699145993471476194503387272230234e-19,
                -2.242407694525583556140058750006128491924916204038852290292985e-21,
                -1.759447752651847364048938898264828071373418617420955762135442e-21
                
            ])
        }

        if name == "db":
            coef = db_coefficients[N]
            
        elif name == "sym":
            coef = sym_coefficients[N]

        elif name == "coif":
            coef = coif_coefficients[N]
    
        return coef

if __name__ == "__main__":
    
    app = Wavelet("sym14")            # передаем название вейвлета
    app.signal_length = 2000          # изменение переменных класса
    
    graph = app.generate_wavelet()    # построение вейвлета
    plt.plot(graph)
    
    names = app.get_wavelet_list()    # так же можно посмотреть список доступных вейвлетов
    print(names)